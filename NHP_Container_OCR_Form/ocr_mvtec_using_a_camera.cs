//
// File generated by HDevelop for HALCON/.NET (C#) Version 13.0.2.1
//

using HalconDotNet;

public partial class HDevelopExport
{
#if !(NO_EXPORT_MAIN || NO_EXPORT_APP_MAIN)
  public HDevelopExport()
  {
    // Default settings used in HDevelop 
    HOperatorSet.SetSystem("width", 512);
    HOperatorSet.SetSystem("height", 512);
    if (HalconAPI.isWindows)
      HOperatorSet.SetSystem("use_window_thread","true");
    action();
  }
#endif

  // Procedures 
#if !NO_EXPORT_MAIN
  // Main procedure 
  private void action()
  {


    // Local iconic variables 

    HObject ho_Image, ho_ImageRotate, ho_ROI_0;
    HObject ho_ImageReduced, ho_Regions, ho_RegionFillUp, ho_ConnectedRegions;
    HObject ho_SelectedRegions, ho_BinImage, ho_Characters;
    HObject ho_Image2, ho_ImageRotate2, ho_ROI_02, ho_ImageReduced2;
    HObject ho_Regions2, ho_RegionFillUp2, ho_ConnectedRegions2;
    HObject ho_SelectedRegions2, ho_BinImage2, ho_Characters2;

    // Local control variables 

    HTuple hv_AcqHandle = null, hv_Width = null;
    HTuple hv_Height = null, hv_TextModel = null, hv_TextResultID = null;
    HTuple hv_ResultValue = null, hv_Width2 = null, hv_Height2 = null;
    HTuple hv_TextModel2 = null, hv_TextResultID2 = null, hv_ResultValue2 = null;
    HTuple hv_license = null, hv_container = null, hv_licLength = null;
    HTuple hv_i = null, hv_conLength = null;
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_Image);
    HOperatorSet.GenEmptyObj(out ho_ImageRotate);
    HOperatorSet.GenEmptyObj(out ho_ROI_0);
    HOperatorSet.GenEmptyObj(out ho_ImageReduced);
    HOperatorSet.GenEmptyObj(out ho_Regions);
    HOperatorSet.GenEmptyObj(out ho_RegionFillUp);
    HOperatorSet.GenEmptyObj(out ho_ConnectedRegions);
    HOperatorSet.GenEmptyObj(out ho_SelectedRegions);
    HOperatorSet.GenEmptyObj(out ho_BinImage);
    HOperatorSet.GenEmptyObj(out ho_Characters);
    HOperatorSet.GenEmptyObj(out ho_Image2);
    HOperatorSet.GenEmptyObj(out ho_ImageRotate2);
    HOperatorSet.GenEmptyObj(out ho_ROI_02);
    HOperatorSet.GenEmptyObj(out ho_ImageReduced2);
    HOperatorSet.GenEmptyObj(out ho_Regions2);
    HOperatorSet.GenEmptyObj(out ho_RegionFillUp2);
    HOperatorSet.GenEmptyObj(out ho_ConnectedRegions2);
    HOperatorSet.GenEmptyObj(out ho_SelectedRegions2);
    HOperatorSet.GenEmptyObj(out ho_BinImage2);
    HOperatorSet.GenEmptyObj(out ho_Characters2);
    //open_framegrabber ('GenICamTL', 0, 0, 0, 0, 0, 0, 'progressive', -1, 'default', -1, 'false', 'default', '0x305316d5c4', 0, -1, AcqHandle)
    //Image Acquisition 01: Code generated by Image Acquisition 01
    //Image Acquisition 01: Code generated by Image Acquisition 01
    HOperatorSet.OpenFramegrabber("GigEVision2", 0, 0, 0, 0, 0, 0, "progressive", 
        -1, "default", -1, "false", "default", "licenseCam", 0, -1, out hv_AcqHandle);
    //open_framegrabber ('GigEVision', 0, 0, 0, 0, 0, 0, 'default', -1, 'default', -1, 'false', 'default', 'licenseCam', 0, -1, AcqHandle)
    HOperatorSet.SetFramegrabberParam(hv_AcqHandle, "AcquisitionMode", "SingleFrame");

    //set_framegrabber_param (AcqHandle, 'ExposureTimeAbs', 55555.0)
    HOperatorSet.GrabImageStart(hv_AcqHandle, -1);
    //

    ho_Image.Dispose();
    HOperatorSet.GrabImageAsync(out ho_Image, hv_AcqHandle, -1);
    HOperatorSet.GetImageSize(ho_Image, out hv_Width, out hv_Height);
    ho_ImageRotate.Dispose();
    HOperatorSet.RotateImage(ho_Image, out ho_ImageRotate, 0, "constant");
    ho_Image.Dispose();
    HOperatorSet.AccessChannel(ho_ImageRotate, out ho_Image, 1);
    //OLD
    //gen_rectangle1 (ROI_0, 431.688, 468.25, 607.938, 1265.75)
    //gen_rectangle1 (ROI_0, 442.63, 403.582, 632.248, 1275.42)
    ho_ROI_0.Dispose();
    HOperatorSet.GenRectangle1(out ho_ROI_0, 490.034, 428.071, 681.714, 1339.09);


    //Remove large blobs
    //gray_closing_rect (Image, ImageClosing, 10, 10)
    //sub_image (Image, ImageClosing, ImageSub, 3, 0)
    //
    //Preprocessing to enhance contrast
    ho_ImageReduced.Dispose();
    HOperatorSet.ReduceDomain(ho_Image, ho_ROI_0, out ho_ImageReduced);
    ho_Regions.Dispose();
    HOperatorSet.Threshold(ho_ImageReduced, out ho_Regions, 0, 80);
    ho_RegionFillUp.Dispose();
    HOperatorSet.FillUpShape(ho_Regions, out ho_RegionFillUp, "area", 0, 40);
    ho_ConnectedRegions.Dispose();
    HOperatorSet.Connection(ho_RegionFillUp, out ho_ConnectedRegions);
    ho_SelectedRegions.Dispose();
    HOperatorSet.SelectShape(ho_ConnectedRegions, out ho_SelectedRegions, "area", 
        "and", 150, 99999);
    ho_BinImage.Dispose();
    HOperatorSet.RegionToBin(ho_SelectedRegions, out ho_BinImage, 0, 255, hv_Width, 
        hv_Height);
    //
    //Perform OCR using the automatic text model reader
    HOperatorSet.CreateTextModelReader("auto", "Industrial_0-9+_Rej.omc", out hv_TextModel);
    //set_text_model_param (TextModel, 'max_char_height', 200)
    //set_text_model_param (TextModel, 'min_char_height', 20)
    //set_text_model_param (TextModel, 'min_char_width', 5)
    //set_text_model_param (TextModel, 'max_char_width', 175)
    //set_text_model_param (TextModel, 'return_separators', 'false')
    //set_text_model_param (TextModel, 'min_contrast', 30)
    HOperatorSet.FindText(ho_BinImage, hv_TextModel, out hv_TextResultID);
    //
    //Get the results from the OCR
    ho_Characters.Dispose();
    HOperatorSet.GetTextObject(out ho_Characters, hv_TextResultID, "all_lines");
    HOperatorSet.GetTextResult(hv_TextResultID, "class", out hv_ResultValue);
    //
    if (HDevWindowStack.IsOpen())
    {
      HOperatorSet.DispObj(ho_Image, HDevWindowStack.GetActive());
    }
    if (HDevWindowStack.IsOpen())
    {
      HOperatorSet.SetColor(HDevWindowStack.GetActive(), "green");
    }
    if (HDevWindowStack.IsOpen())
    {
      HOperatorSet.DispObj(ho_Characters, HDevWindowStack.GetActive());
    }
    //do memory cleanup here
    if (HDevWindowStack.IsOpen())
    {
      HOperatorSet.ClearWindow(HDevWindowStack.GetActive());
    }
    dev_update_on();

    HOperatorSet.CloseFramegrabber(hv_AcqHandle);




    //********************************************second camera

    //Image Acquisition 02: Code generated by Image Acquisition 02
    //open_framegrabber ('GigEVision', 0, 0, 0, 0, 0, 0, 'default', -1, 'default', -1, 'false', 'default', 'containerCam', 0, -1, AcqHandle)
    //Image Acquisition 02: Code generated by Image Acquisition 02
    HOperatorSet.OpenFramegrabber("GigEVision2", 0, 0, 0, 0, 0, 0, "progressive", 
        -1, "default", -1, "false", "default", "containerCam", 0, -1, out hv_AcqHandle);

    //open_framegrabber ('GenICamTL', 0, 0, 0, 0, 0, 0, 'progressive', -1, 'default', -1, 'false', 'default', '0x3053228741', 0, -1, AcqHandle)
    //set_framegrabber_param (AcqHandle, 'ExposureTimeAbs', 55555.0)
    HOperatorSet.GrabImageStart(hv_AcqHandle, -1);
    //
    ho_Image2.Dispose();
    HOperatorSet.GrabImageAsync(out ho_Image2, hv_AcqHandle, -1);
    HOperatorSet.GetImageSize(ho_Image2, out hv_Width2, out hv_Height2);
    ho_ImageRotate2.Dispose();
    HOperatorSet.RotateImage(ho_Image2, out ho_ImageRotate2, 180, "constant");
    ho_Image2.Dispose();
    HOperatorSet.AccessChannel(ho_ImageRotate2, out ho_Image2, 1);
    //OLD
    //gen_rectangle1 (ROI_02, 330.438, 690.75, 459.813, 1548.25)
    //gen_rectangle1 (ROI_02, 30.416, 658.276, 199.424, 1564.4)
    ho_ROI_02.Dispose();
    HOperatorSet.GenRectangle1(out ho_ROI_02, -4.62214, 670.52, 114.92, 1527.66);

    //Remove large blobs
    //gray_closing_rect (Image2, ImageClosing2, 10, 10)
    //sub_image (Image2, ImageClosing2, ImageSub2, 3, 180)
    //
    //Preprocessing to enhance contrast
    ho_ImageReduced2.Dispose();
    HOperatorSet.ReduceDomain(ho_Image2, ho_ROI_02, out ho_ImageReduced2);
    ho_Regions2.Dispose();
    HOperatorSet.Threshold(ho_ImageReduced2, out ho_Regions2, 0, 120);
    ho_RegionFillUp2.Dispose();
    HOperatorSet.FillUpShape(ho_Regions2, out ho_RegionFillUp2, "area", 0, 40);
    ho_ConnectedRegions2.Dispose();
    HOperatorSet.Connection(ho_RegionFillUp2, out ho_ConnectedRegions2);
    ho_SelectedRegions2.Dispose();
    HOperatorSet.SelectShape(ho_ConnectedRegions2, out ho_SelectedRegions2, "area", 
        "and", 150, 99999);
    ho_BinImage2.Dispose();
    HOperatorSet.RegionToBin(ho_SelectedRegions2, out ho_BinImage2, 255, 0, hv_Width2, 
        hv_Height2);
    //
    //Perform OCR using the automatic text model reader
    HOperatorSet.CreateTextModelReader("auto", "Industrial_0-9A-Z_Rej.omc", out hv_TextModel2);
    //set_text_model_param (TextModel2, 'max_char_height', 200)
    //set_text_model_param (TextModel2, 'min_char_height', 1)
    //set_text_model_param (TextModel2, 'min_char_width', 1)
    //set_text_model_param (TextModel2, 'max_char_width', 175)
    //set_text_model_param (TextModel2, 'return_separators', 'false')
    //set_text_model_param (TextModel2, 'min_contrast', 30)
    HOperatorSet.FindText(ho_BinImage2, hv_TextModel2, out hv_TextResultID2);
    //
    //Get the results from the OCR
    ho_Characters2.Dispose();
    HOperatorSet.GetTextObject(out ho_Characters2, hv_TextResultID2, "all_lines");
    HOperatorSet.GetTextResult(hv_TextResultID2, "class", out hv_ResultValue2);
    //
    if (HDevWindowStack.IsOpen())
    {
      HOperatorSet.DispObj(ho_Image2, HDevWindowStack.GetActive());
    }
    if (HDevWindowStack.IsOpen())
    {
      HOperatorSet.SetColor(HDevWindowStack.GetActive(), "green");
    }
    if (HDevWindowStack.IsOpen())
    {
      HOperatorSet.DispObj(ho_Characters2, HDevWindowStack.GetActive());
    }
    //do memory cleanup here
    if (HDevWindowStack.IsOpen())
    {
      HOperatorSet.ClearWindow(HDevWindowStack.GetActive());
    }
    dev_update_on();

    HOperatorSet.CloseFramegrabber(hv_AcqHandle);
    hv_license = "";
    hv_container = "";
    HOperatorSet.TupleStrlen(hv_ResultValue, out hv_licLength);
    HOperatorSet.TupleSum(hv_licLength, out hv_licLength);
    HTuple end_val117 = hv_licLength-1;
    HTuple step_val117 = 1;
    for (hv_i=0; hv_i.Continue(end_val117, step_val117); hv_i = hv_i.TupleAdd(step_val117))
    {
      hv_license = hv_license+(hv_ResultValue.TupleSelect(hv_i));
    }
    HOperatorSet.TupleStrlen(hv_ResultValue2, out hv_conLength);
    HOperatorSet.TupleSum(hv_conLength, out hv_conLength);
    HTuple end_val122 = hv_conLength-1;
    HTuple step_val122 = 1;
    for (hv_i=0; hv_i.Continue(end_val122, step_val122); hv_i = hv_i.TupleAdd(step_val122))
    {
      hv_container = hv_container+(hv_ResultValue2.TupleSelect(hv_i));
    }
    hv_license = hv_license.TupleSelect(0);


    ho_Image.Dispose();
    ho_ImageRotate.Dispose();
    ho_ROI_0.Dispose();
    ho_ImageReduced.Dispose();
    ho_Regions.Dispose();
    ho_RegionFillUp.Dispose();
    ho_ConnectedRegions.Dispose();
    ho_SelectedRegions.Dispose();
    ho_BinImage.Dispose();
    ho_Characters.Dispose();
    ho_Image2.Dispose();
    ho_ImageRotate2.Dispose();
    ho_ROI_02.Dispose();
    ho_ImageReduced2.Dispose();
    ho_Regions2.Dispose();
    ho_RegionFillUp2.Dispose();
    ho_ConnectedRegions2.Dispose();
    ho_SelectedRegions2.Dispose();
    ho_BinImage2.Dispose();
    ho_Characters2.Dispose();

  }

#endif


}
#if !(NO_EXPORT_MAIN || NO_EXPORT_APP_MAIN)
public class HDevelopExportApp
{
  static void Main(string[] args)
  {
    new HDevelopExport();
  }
}
#endif

